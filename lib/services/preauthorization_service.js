/**
 *
 * Creates a new PreauthorizationService. Generally you should never create a PAYMILL service on your own. Instead use the exported "preauthorizations".
 * @class PreauthorizationService
 */
function PreauthorizationService() {

}

PreauthorizationService.prototype = new PaymillService();
PreauthorizationService.prototype.constructor = PreauthorizationService;
PreauthorizationService.prototype.getPaymillObject = function() {
	return Preauthorization;
};
PreauthorizationService.prototype.getEndpointPath = function() {
	return "/preauthorizations";
};

PreauthorizationService.prototype._createPreauthorization = function(map, amount, currency, description, cb) {
	if (!__.isString(amount) && !__.isNumber(amount)) {
		return this._reject(new PMError(PMError.Type.WRONG_PARAMS, "amount must be a string or integer"));
	}
	if (!__.isString(currency)) {
		return this._reject(new PMError(PMError.Type.WRONG_PARAMS, "currency must be a string"));
	}
	var path = this.getEndpointPath();
	map.amount = amount;
    map.currency = currency;
    map.description = description;
	map.source = getSourceIdentifier();
	return this._create(map, Transaction, cb);
};

/**
 * Create a preauthorization with a token.
 * @param {string} token the payment token, generated by the PAYMILL bridge.
 * @param {(string|number)} amount amount (in cents) which will be charged.
 * @param {string} currency ISO 4217 formatted currency code.
 * @param {string} description  A short description for the preauthorization.
 * @param {Object} [cb] a callback.
 * @return {Promise} a promise, which will be fulfilled with a Transaction or rejected with a PMError. The actual preauthorization is in the transaction member "preauthorization".
 * @memberOf PreauthorizationService
 */
PreauthorizationService.prototype.createWithToken = function(token, amount, currency, description, cb) {
	try {
		if (!__.isString(token)) {
			return this._reject(new PMError(PMError.Type.WRONG_PARAMS, "token must be a string"));
		}
		var map = {
			"token" : token
		};
		return this._createPreauthorization(map, amount, currency, description, cb);
	} catch(e) {
		return this._reject(e);
	}
};
/**
 * Create a preauthorization with a payment object.
 * @param {(string|Payment)} payment the payment object for the preauthorization or its id.
 * @param {(string|number)} amount amount (in cents) which will be charged.
 * @param {string} currency ISO 4217 formatted currency code.
 * @param {string} description  A short description for the preauthorization.
 * @param {Object} [cb] a callback.
 * @return {Promise} a promise, which will be fulfilled with a Transaction or rejected with a PMError. The actual preauthorization is in the transaction member "preauthorization".
 * @memberOf PreauthorizationService
 */
PreauthorizationService.prototype.createWithPayment = function(payment, amount, currency, description, cb) {
	try {
		var id = getIdFromObject(payment, Payment);
		var map = {
			"payment" : id
		};
		return this._createPreauthorization(map, amount, currency, description, cb);
	} catch(e) {
		return this._reject(e);
	}
};
/**
 * List preauthorizations.
 * @param {(string|number)} [count] limit of objects to be listed. use for pagination.
 * @param {(string|number)} [offset] offset. use for pagination.
 * @param {(Preauthorization.Filter|null)} [filter] a list filter or null.
 * @param {(Preauthorization.Order|null)} [order] a list order or null.
 * @param {Object} [cb] a callback.
 * @return {Promise} a promise, which will be fulfilled with a PayMillObjectList or rejected with a PMError.
 * @memberOf PreauthorizationService
 */
PreauthorizationService.prototype.list = function(count, offset, filter, order, cb) {
	return this._list(count, offset, filter, order, cb);
};

/**
 * Remove a preauthorization.
 * @param {Preauthorization} obj a preauthorization object or its id.
 * @param {Object} [cb] a callback.
 * @return {Promise} a promise, which will be fulfilled with a Preauthorization or rejected with a PMError.
 * @memberOf PreauthorizationService
 */
PreauthorizationService.prototype.remove = function(obj, cb) {
	return this._remove(obj, cb);
};

/**
 * Get a preauthorization.
 * @param {(string|Preauthorization)} obj a preauthorization object or its id. note, if you set a preauthorization object it will be updated, no new object will be created.
 * @param {Object} [cb] a callback.
 * @return {Promise} a promise, which will be fulfilled with a Preauthorization or rejected with a PMError.
 * @memberOf PreauthorizationService
 */
PreauthorizationService.prototype.detail = function(obj, cb) {
	return this._detail(obj, cb);
};

/**
 * The {@link PreauthorizationService} service.
 */
exports.preauthorizations = new PreauthorizationService();
